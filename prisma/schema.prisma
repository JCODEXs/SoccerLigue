// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}
model Location {
  id        String   @id @default(cuid())
  name      String   @unique
  matches   Match[]
  createdAt DateTime @default(now())
}

model Team {
  id        String   @id @default(cuid())
  name      String   @unique
  players   Player[]
  matchesHome Match[] @relation(name: "HomeMatches")
  matchesAway Match[] @relation(name: "AwayMatches")
  createdAt DateTime @default(now())
}

model Player {
  id        String   @id @default(cuid())
  name      String
  position  String
  number    Int
  teamId    String?
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
}

model Event {
  id         String  @id @default(uuid())
  type       String
  team       String?
  player     String
  assistant  String? 
  substitute String? 
  card       String? 
  timestamp  String
  matchId    String?
  match      Match? @relation(fields: [matchId], references: [id], onDelete: SetNull)
}
model Score {
  id        String @id @default(cuid()) // Added an ID for better referencing
  homeScore Int
  awayScore Int
  matchId   String @unique // Ensures one score per match
  match     Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
}
model Match {
  id         String   @id @default(cuid())
  homeTeamId String?
  awayTeamId String?
  locationId String
  date       DateTime
  time       String
  judge      String
  events     Event[]
  score      Score?
  homeTeam   Team?     @relation(name: "HomeMatches", fields: [homeTeamId], references: [id], onDelete: SetNull)
  awayTeam   Team?     @relation(name: "AwayMatches", fields: [awayTeamId], references: [id], onDelete: SetNull)
  location   Location @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}




model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
